#!/bin/bash
# chkconfig: 2345 90 90
# description: Go Agent <%= @name %>
### BEGIN INIT INFO
# Provides: <%= @name %>
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Start the Go Agent <%= @name %>
### END INIT INFO

USER="<%= @name -%>"
INSTANCE_NAME="<%= @name -%>"
PID_DIR="/var/run/<%= @name %>"
PID_FILE="/var/run/<%= @name %>/go-agent.pid"
CUR_USER=`whoami`
LOG_FILE=$AGENT_WORK_DIR/go-agent-launcher.log

# LSB implimentation is not standard across distros, so we have to roll our own...
killproc() {
  pkill -u $USER -f /usr/share/go-agent/agent-bootstrapper.jar
}

start_daemon() {
    eval "$*"
}

log_success_msg() {
    echo "$*"
}

log_failure_msg() {
    echo "$*"
}

. /etc/default/$INSTANCE_NAME

check_proc() {
    pgrep -u $USER -f /usr/share/go-agent/agent-bootstrapper.jar >/dev/null
}

start_go_agent() {
    if [ "${CUR_USER}" != "root" ] && [ "${CUR_USER}" != "${INSTANCE_NAME}" ]; then
        log_failure_msg "Go Agent $INSTANCE_NAME can only be started as 'root' or '${INSTANCE_NAME}' user."
        exit 4
    fi

    check_proc
    if [ $? -eq 0 ]; then
      log_success_msg "Go Agent $INSTANCE_NAME already running."
      exit 0
    fi

    [ -d $PID_DIR ] || (mkdir $PID_DIR && chown -R $USER:$USER $PID_DIR)

    if [ "$JAVA_HOME" != "" ]; then
        if [ "${CUR_USER}" == "root" ]; then
            start_daemon /bin/su - $USER -c "/usr/share/go-agent/${INSTANCE_NAME}.sh"
        else
            start_daemon "/usr/share/go-agent/${INSTANCE_NAME}.sh"
        fi
    else
        log_failure_msg "Starting up of Go Agent $INSTANCE_NAME requires JAVA_HOME to be set in /etc/default/$INSTANCE_NAME. Please set JAVA_HOME to proceed."
    fi

    # Sleep for a while to see if Cruise bleats about anything
    sleep 15
    check_proc

    if [ $? -eq 0 ]; then
        log_success_msg "Started Go Agent $INSTANCE_NAME."
    else
        log_failure_msg "Error starting Go Agent $INSTANCE_NAME."
        exit -1
    fi
}

stop_go_agent() {
    if [ "${CUR_USER}" != "root" ] && [ "${CUR_USER}" != "${USER}" ]; then
        log_failure_msg "You do not have permission to stop the Go Agent $INSTANCE_NAME"
        exit 4
    fi

    check_proc

    if [ $? -eq 0 ]; then
        killproc -p $PID_FILE "/usr/share/go-agent/${INSTANCE_NAME}.sh" >/dev/null

        # Make sure it's dead before we return
        until [ $? -ne 0 ]; do
            sleep 1
            check_proc
        done

        check_proc
        if [ $? -eq 0 ]; then
            log_failure_msg "Error stopping Go Agent $INSTANCE_NAME."
            exit -1
        else
            log_success_msg "Stopped Go Agent $INSTANCE_NAME."
        fi
    else
        log_failure_msg "Go is not running or you don't have permission to stop it"
    fi
}

go_status() {
    check_proc
    if [ $? -eq 0 ]; then
      log_success_msg "Go Agent $INSTANCE_NAME is running."
    else
      log_failure_msg "Go Agent $INSTANCE_NAME is stopped."
      exit 3
    fi
}

case "$1" in
    start)
        start_go_agent
        ;;
    stop)
        stop_go_agent
        ;;
    restart)
        stop_go_agent
        start_go_agent
        ;;
    status)
        go_status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit 0
